//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RobotAPISample.UiPathREST {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UiPathREST.IUiPathRemoteContract")]
    public interface IUiPathRemoteContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/StartJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/StartJobResponse")]
        string StartJob(System.IO.Stream jobInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/StartJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/StartJobResponse")]
        System.Threading.Tasks.Task<string> StartJobAsync(System.IO.Stream jobInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/QueryJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/QueryJobResponse")]
        string QueryJob(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/QueryJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/QueryJobResponse")]
        System.Threading.Tasks.Task<string> QueryJobAsync(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteContract/CancelJob")]
        void CancelJob(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteContract/CancelJob")]
        System.Threading.Tasks.Task CancelJobAsync(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/IsAlive", ReplyAction="http://tempuri.org/IUiPathRemoteContract/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/IsAlive", ReplyAction="http://tempuri.org/IUiPathRemoteContract/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/ListJobs", ReplyAction="http://tempuri.org/IUiPathRemoteContract/ListJobsResponse")]
        string ListJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/ListJobs", ReplyAction="http://tempuri.org/IUiPathRemoteContract/ListJobsResponse")]
        System.Threading.Tasks.Task<string> ListJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteContract/RemoveJob")]
        void RemoveJob(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteContract/RemoveJob")]
        System.Threading.Tasks.Task RemoveJobAsync(string jobId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUiPathRemoteContractChannel : RobotAPISample.UiPathREST.IUiPathRemoteContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UiPathRemoteContractClient : System.ServiceModel.ClientBase<RobotAPISample.UiPathREST.IUiPathRemoteContract>, RobotAPISample.UiPathREST.IUiPathRemoteContract {
        
        public UiPathRemoteContractClient() {
        }
        
        public UiPathRemoteContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UiPathRemoteContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UiPathRemoteContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UiPathRemoteContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string StartJob(System.IO.Stream jobInfo) {
            return base.Channel.StartJob(jobInfo);
        }
        
        public System.Threading.Tasks.Task<string> StartJobAsync(System.IO.Stream jobInfo) {
            return base.Channel.StartJobAsync(jobInfo);
        }
        
        public string QueryJob(string jobId) {
            return base.Channel.QueryJob(jobId);
        }
        
        public System.Threading.Tasks.Task<string> QueryJobAsync(string jobId) {
            return base.Channel.QueryJobAsync(jobId);
        }
        
        public void CancelJob(string jobId) {
            base.Channel.CancelJob(jobId);
        }
        
        public System.Threading.Tasks.Task CancelJobAsync(string jobId) {
            return base.Channel.CancelJobAsync(jobId);
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public string ListJobs() {
            return base.Channel.ListJobs();
        }
        
        public System.Threading.Tasks.Task<string> ListJobsAsync() {
            return base.Channel.ListJobsAsync();
        }
        
        public void RemoveJob(string jobId) {
            base.Channel.RemoveJob(jobId);
        }
        
        public System.Threading.Tasks.Task RemoveJobAsync(string jobId) {
            return base.Channel.RemoveJobAsync(jobId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UiPathREST.IUiPathRemoteDuplexContract", CallbackContract=typeof(RobotAPISample.UiPathREST.IUiPathRemoteDuplexContractCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IUiPathRemoteDuplexContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/StartJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/StartJobResponse")]
        string StartJob(System.IO.Stream jobInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/StartJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/StartJobResponse")]
        System.Threading.Tasks.Task<string> StartJobAsync(System.IO.Stream jobInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/QueryJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/QueryJobResponse")]
        string QueryJob(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/QueryJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/QueryJobResponse")]
        System.Threading.Tasks.Task<string> QueryJobAsync(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteContract/CancelJob")]
        void CancelJob(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteContract/CancelJob")]
        System.Threading.Tasks.Task CancelJobAsync(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/IsAlive", ReplyAction="http://tempuri.org/IUiPathRemoteContract/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/IsAlive", ReplyAction="http://tempuri.org/IUiPathRemoteContract/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/ListJobs", ReplyAction="http://tempuri.org/IUiPathRemoteContract/ListJobsResponse")]
        string ListJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/ListJobs", ReplyAction="http://tempuri.org/IUiPathRemoteContract/ListJobsResponse")]
        System.Threading.Tasks.Task<string> ListJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteContract/RemoveJob")]
        void RemoveJob(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteContract/RemoveJob")]
        System.Threading.Tasks.Task RemoveJobAsync(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteDuplexContract/ResumeJob")]
        void ResumeJob(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteDuplexContract/ResumeJob")]
        System.Threading.Tasks.Task ResumeJobAsync(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/ConnectToServer", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/ConnectToServerResponse")]
        void ConnectToServer(string serverConnectionInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/ConnectToServer", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/ConnectToServerResponse")]
        System.Threading.Tasks.Task ConnectToServerAsync(string serverConnectionInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/GetAssociatedProcesses", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/GetAssociatedProcessesResponse")]
        string GetAssociatedProcesses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/GetAssociatedProcesses", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/GetAssociatedProcessesResponse")]
        System.Threading.Tasks.Task<string> GetAssociatedProcessesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/GetServerSettings", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/GetServerSettingsResponse")]
        string GetServerSettings(string serverUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/GetServerSettings", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/GetServerSettingsResponse")]
        System.Threading.Tasks.Task<string> GetServerSettingsAsync(string serverUrl);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteDuplexContract/InstallPackage")]
        void InstallPackage(string packageId, string packageVersion);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteDuplexContract/InstallPackage")]
        System.Threading.Tasks.Task InstallPackageAsync(string packageId, string packageVersion);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUiPathRemoteDuplexContractCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/OnJobCompleted", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/OnJobCompletedResponse")]
        void OnJobCompleted(string invokeCompletedInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/OnTrackReceived", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/OnTrackReceivedResponse")]
        bool OnTrackReceived(string trackRecord);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteDuplexContract/OnLog")]
        void OnLog(string LogMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/OnPackagesUpdated", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/OnPackagesUpdatedResponse")]
        void OnPackagesUpdated();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUiPathRemoteDuplexContractChannel : RobotAPISample.UiPathREST.IUiPathRemoteDuplexContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UiPathRemoteDuplexContractClient : System.ServiceModel.DuplexClientBase<RobotAPISample.UiPathREST.IUiPathRemoteDuplexContract>, RobotAPISample.UiPathREST.IUiPathRemoteDuplexContract {
        
        public UiPathRemoteDuplexContractClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public UiPathRemoteDuplexContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public UiPathRemoteDuplexContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UiPathRemoteDuplexContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UiPathRemoteDuplexContractClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string StartJob(System.IO.Stream jobInfo) {
            return base.Channel.StartJob(jobInfo);
        }
        
        public System.Threading.Tasks.Task<string> StartJobAsync(System.IO.Stream jobInfo) {
            return base.Channel.StartJobAsync(jobInfo);
        }
        
        public string QueryJob(string jobId) {
            return base.Channel.QueryJob(jobId);
        }
        
        public System.Threading.Tasks.Task<string> QueryJobAsync(string jobId) {
            return base.Channel.QueryJobAsync(jobId);
        }
        
        public void CancelJob(string jobId) {
            base.Channel.CancelJob(jobId);
        }
        
        public System.Threading.Tasks.Task CancelJobAsync(string jobId) {
            return base.Channel.CancelJobAsync(jobId);
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public string ListJobs() {
            return base.Channel.ListJobs();
        }
        
        public System.Threading.Tasks.Task<string> ListJobsAsync() {
            return base.Channel.ListJobsAsync();
        }
        
        public void RemoveJob(string jobId) {
            base.Channel.RemoveJob(jobId);
        }
        
        public System.Threading.Tasks.Task RemoveJobAsync(string jobId) {
            return base.Channel.RemoveJobAsync(jobId);
        }
        
        public void ResumeJob(string jobId) {
            base.Channel.ResumeJob(jobId);
        }
        
        public System.Threading.Tasks.Task ResumeJobAsync(string jobId) {
            return base.Channel.ResumeJobAsync(jobId);
        }
        
        public void ConnectToServer(string serverConnectionInfo) {
            base.Channel.ConnectToServer(serverConnectionInfo);
        }
        
        public System.Threading.Tasks.Task ConnectToServerAsync(string serverConnectionInfo) {
            return base.Channel.ConnectToServerAsync(serverConnectionInfo);
        }
        
        public string GetAssociatedProcesses() {
            return base.Channel.GetAssociatedProcesses();
        }
        
        public System.Threading.Tasks.Task<string> GetAssociatedProcessesAsync() {
            return base.Channel.GetAssociatedProcessesAsync();
        }
        
        public string GetServerSettings(string serverUrl) {
            return base.Channel.GetServerSettings(serverUrl);
        }
        
        public System.Threading.Tasks.Task<string> GetServerSettingsAsync(string serverUrl) {
            return base.Channel.GetServerSettingsAsync(serverUrl);
        }
        
        public void InstallPackage(string packageId, string packageVersion) {
            base.Channel.InstallPackage(packageId, packageVersion);
        }
        
        public System.Threading.Tasks.Task InstallPackageAsync(string packageId, string packageVersion) {
            return base.Channel.InstallPackageAsync(packageId, packageVersion);
        }
    }
}
