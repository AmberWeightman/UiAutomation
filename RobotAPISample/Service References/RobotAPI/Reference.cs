//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RobotAPISample.RobotAPI {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RobotAPI.IUiPathRemoteContract")]
    public interface IUiPathRemoteContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/StartJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/StartJobResponse")]
        string StartJob(System.IO.Stream jobInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/StartJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/StartJobResponse")]
        System.Threading.Tasks.Task<string> StartJobAsync(System.IO.Stream jobInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/QueryJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/QueryJobResponse")]
        string QueryJob(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/QueryJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/QueryJobResponse")]
        System.Threading.Tasks.Task<string> QueryJobAsync(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteContract/CancelJob")]
        void CancelJob(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteContract/CancelJob")]
        System.Threading.Tasks.Task CancelJobAsync(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/IsAlive", ReplyAction="http://tempuri.org/IUiPathRemoteContract/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/IsAlive", ReplyAction="http://tempuri.org/IUiPathRemoteContract/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/ListJobs", ReplyAction="http://tempuri.org/IUiPathRemoteContract/ListJobsResponse")]
        string ListJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/ListJobs", ReplyAction="http://tempuri.org/IUiPathRemoteContract/ListJobsResponse")]
        System.Threading.Tasks.Task<string> ListJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/StoreCredential", ReplyAction="http://tempuri.org/IUiPathRemoteContract/StoreCredentialResponse")]
        string StoreCredential(string username, string protectedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/StoreCredential", ReplyAction="http://tempuri.org/IUiPathRemoteContract/StoreCredentialResponse")]
        System.Threading.Tasks.Task<string> StoreCredentialAsync(string username, string protectedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/InstallAssociatedProcesses", ReplyAction="http://tempuri.org/IUiPathRemoteContract/InstallAssociatedProcessesResponse")]
        void InstallAssociatedProcesses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/InstallAssociatedProcesses", ReplyAction="http://tempuri.org/IUiPathRemoteContract/InstallAssociatedProcessesResponse")]
        System.Threading.Tasks.Task InstallAssociatedProcessesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUiPathRemoteContractChannel : RobotAPISample.RobotAPI.IUiPathRemoteContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UiPathRemoteContractClient : System.ServiceModel.ClientBase<RobotAPISample.RobotAPI.IUiPathRemoteContract>, RobotAPISample.RobotAPI.IUiPathRemoteContract {
        
        public UiPathRemoteContractClient() {
        }
        
        public UiPathRemoteContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UiPathRemoteContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UiPathRemoteContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UiPathRemoteContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string StartJob(System.IO.Stream jobInfo) {
            return base.Channel.StartJob(jobInfo);
        }
        
        public System.Threading.Tasks.Task<string> StartJobAsync(System.IO.Stream jobInfo) {
            return base.Channel.StartJobAsync(jobInfo);
        }
        
        public string QueryJob(string jobId) {
            return base.Channel.QueryJob(jobId);
        }
        
        public System.Threading.Tasks.Task<string> QueryJobAsync(string jobId) {
            return base.Channel.QueryJobAsync(jobId);
        }
        
        public void CancelJob(string jobId) {
            base.Channel.CancelJob(jobId);
        }
        
        public System.Threading.Tasks.Task CancelJobAsync(string jobId) {
            return base.Channel.CancelJobAsync(jobId);
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public string ListJobs() {
            return base.Channel.ListJobs();
        }
        
        public System.Threading.Tasks.Task<string> ListJobsAsync() {
            return base.Channel.ListJobsAsync();
        }
        
        public string StoreCredential(string username, string protectedPassword) {
            return base.Channel.StoreCredential(username, protectedPassword);
        }
        
        public System.Threading.Tasks.Task<string> StoreCredentialAsync(string username, string protectedPassword) {
            return base.Channel.StoreCredentialAsync(username, protectedPassword);
        }
        
        public void InstallAssociatedProcesses() {
            base.Channel.InstallAssociatedProcesses();
        }
        
        public System.Threading.Tasks.Task InstallAssociatedProcessesAsync() {
            return base.Channel.InstallAssociatedProcessesAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RobotAPI.IUiPathRemoteDuplexContract", CallbackContract=typeof(RobotAPISample.RobotAPI.IUiPathRemoteDuplexContractCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IUiPathRemoteDuplexContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/StartJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/StartJobResponse")]
        string StartJob(System.IO.Stream jobInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/StartJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/StartJobResponse")]
        System.Threading.Tasks.Task<string> StartJobAsync(System.IO.Stream jobInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/QueryJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/QueryJobResponse")]
        string QueryJob(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/QueryJob", ReplyAction="http://tempuri.org/IUiPathRemoteContract/QueryJobResponse")]
        System.Threading.Tasks.Task<string> QueryJobAsync(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteContract/CancelJob")]
        void CancelJob(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteContract/CancelJob")]
        System.Threading.Tasks.Task CancelJobAsync(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/IsAlive", ReplyAction="http://tempuri.org/IUiPathRemoteContract/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/IsAlive", ReplyAction="http://tempuri.org/IUiPathRemoteContract/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/ListJobs", ReplyAction="http://tempuri.org/IUiPathRemoteContract/ListJobsResponse")]
        string ListJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/ListJobs", ReplyAction="http://tempuri.org/IUiPathRemoteContract/ListJobsResponse")]
        System.Threading.Tasks.Task<string> ListJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/StoreCredential", ReplyAction="http://tempuri.org/IUiPathRemoteContract/StoreCredentialResponse")]
        string StoreCredential(string username, string protectedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/StoreCredential", ReplyAction="http://tempuri.org/IUiPathRemoteContract/StoreCredentialResponse")]
        System.Threading.Tasks.Task<string> StoreCredentialAsync(string username, string protectedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/InstallAssociatedProcesses", ReplyAction="http://tempuri.org/IUiPathRemoteContract/InstallAssociatedProcessesResponse")]
        void InstallAssociatedProcesses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteContract/InstallAssociatedProcesses", ReplyAction="http://tempuri.org/IUiPathRemoteContract/InstallAssociatedProcessesResponse")]
        System.Threading.Tasks.Task InstallAssociatedProcessesAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteDuplexContract/ResumeJob")]
        void ResumeJob(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteDuplexContract/ResumeJob")]
        System.Threading.Tasks.Task ResumeJobAsync(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/ConnectToServer", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/ConnectToServerResponse")]
        void ConnectToServer(string serverUrl, string nugetUrl, string nugetApi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/ConnectToServer", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/ConnectToServerResponse")]
        System.Threading.Tasks.Task ConnectToServerAsync(string serverUrl, string nugetUrl, string nugetApi);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUiPathRemoteDuplexContractCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/OnJobCompleted", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/OnJobCompletedResponse")]
        void OnJobCompleted(string invokeCompletedInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUiPathRemoteDuplexContract/OnTrackReceived", ReplyAction="http://tempuri.org/IUiPathRemoteDuplexContract/OnTrackReceivedResponse")]
        bool OnTrackReceived(string trackRecord);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUiPathRemoteDuplexContract/OnLog")]
        void OnLog(string LogMessage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUiPathRemoteDuplexContractChannel : RobotAPISample.RobotAPI.IUiPathRemoteDuplexContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UiPathRemoteDuplexContractClient : System.ServiceModel.DuplexClientBase<RobotAPISample.RobotAPI.IUiPathRemoteDuplexContract>, RobotAPISample.RobotAPI.IUiPathRemoteDuplexContract {
        
        public UiPathRemoteDuplexContractClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public UiPathRemoteDuplexContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public UiPathRemoteDuplexContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UiPathRemoteDuplexContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UiPathRemoteDuplexContractClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string StartJob(System.IO.Stream jobInfo) {
            return base.Channel.StartJob(jobInfo);
        }
        
        public System.Threading.Tasks.Task<string> StartJobAsync(System.IO.Stream jobInfo) {
            return base.Channel.StartJobAsync(jobInfo);
        }
        
        public string QueryJob(string jobId) {
            return base.Channel.QueryJob(jobId);
        }
        
        public System.Threading.Tasks.Task<string> QueryJobAsync(string jobId) {
            return base.Channel.QueryJobAsync(jobId);
        }
        
        public void CancelJob(string jobId) {
            base.Channel.CancelJob(jobId);
        }
        
        public System.Threading.Tasks.Task CancelJobAsync(string jobId) {
            return base.Channel.CancelJobAsync(jobId);
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public string ListJobs() {
            return base.Channel.ListJobs();
        }
        
        public System.Threading.Tasks.Task<string> ListJobsAsync() {
            return base.Channel.ListJobsAsync();
        }
        
        public string StoreCredential(string username, string protectedPassword) {
            return base.Channel.StoreCredential(username, protectedPassword);
        }
        
        public System.Threading.Tasks.Task<string> StoreCredentialAsync(string username, string protectedPassword) {
            return base.Channel.StoreCredentialAsync(username, protectedPassword);
        }
        
        public void InstallAssociatedProcesses() {
            base.Channel.InstallAssociatedProcesses();
        }
        
        public System.Threading.Tasks.Task InstallAssociatedProcessesAsync() {
            return base.Channel.InstallAssociatedProcessesAsync();
        }
        
        public void ResumeJob(string jobId) {
            base.Channel.ResumeJob(jobId);
        }
        
        public System.Threading.Tasks.Task ResumeJobAsync(string jobId) {
            return base.Channel.ResumeJobAsync(jobId);
        }
        
        public void ConnectToServer(string serverUrl, string nugetUrl, string nugetApi) {
            base.Channel.ConnectToServer(serverUrl, nugetUrl, nugetApi);
        }
        
        public System.Threading.Tasks.Task ConnectToServerAsync(string serverUrl, string nugetUrl, string nugetApi) {
            return base.Channel.ConnectToServerAsync(serverUrl, nugetUrl, nugetApi);
        }
    }
}
